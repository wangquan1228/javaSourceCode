package com.wq.action;

import java.io.File;
import java.util.List;

import javax.print.attribute.standard.PDLOverrideSupported;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;
import com.wq.bean.Customer;
import com.wq.service.CustomerService;
import com.wq.util.PageBean;

public class CustomerAction extends ActionSupport implements ModelDriven<Customer> {
    // spring的注入,获取customerService的bean
    private CustomerService customerService;

    public void setCustomerService(CustomerService customerService) {
        this.customerService = customerService;
    }

    // 模型驱动
    private Customer customer = new Customer();

    @Override
    public Customer getModel() {
        // TODO Auto-generated method stub
        return customer;
    }

    // 属性驱动
    private Integer currentPage;

    private Integer pageSize;
   
    public Integer getCurrentPage() {
        return currentPage;
    }

    public void setCurrentPage(Integer currentPage) {
        this.currentPage = currentPage;
    }

    public Integer getPageSize() {
        return pageSize;
    }

    public void setPageSize(Integer pageSize) {
        this.pageSize = pageSize;
    }

    public String list() throws Exception {
        // 封装离线查询
        DetachedCriteria dc = DetachedCriteria.forClass(Customer.class);
        if (StringUtils.isNotBlank(customer.getCust_name())) {
            dc.add(Restrictions.like("cust_name", "%" + customer.getCust_name() + "%"));
        }
        // 1 调用service的查询分页数据(pageBean)
        PageBean pb = customerService.getPageBean(dc, currentPage, pageSize);
        List<Customer> list = pb.getList();
        // 2 将pageBean放入request域中,转发到列表页面
        ActionContext.getContext().put("list", list);
        ActionContext.getContext().put("pageBean", pb);
        return "list";
    }

    /*
     * 添加用户
     */
    public String saveCust() throws Exception {
        
        customerService.saveCust(customer);
        return "success";
    }

    /*
     * 删除用户
     */
    public String deleteCust() throws Exception {
        customerService.deleteCust(customer.getCust_id());
        return "success";
    }

    /*
     * 根据id查询对象
     */
    public String getCustById() {
        Customer customer1 = customerService.getById(customer.getCust_id());
        ActionContext.getContext().put("customer", customer1);
        return "edit";
    }

    /*
     * 修改用户
     */
    public String updateCust() throws Exception {
        customerService.updateCust(customer);
        return "success";
    }
}
